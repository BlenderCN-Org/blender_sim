#!/usr/bin/env python

#system imports
import argparse
import code
import math
import sys
import numpy
import threading
import subprocess
import os
import re
import shutil
import subprocess
import sys
import tempfile
import time
import traceback

from io_utils import *

#ros imports
try:
    from geometry_msgs.msg import Quaternion, Point
except:
    from collections import namedtuple
    Quaternion = namedtuple("Quaternion", "x y z w")
    Point = namedtuple("Point", "x y z")

def make_closure(func, args1):
    def ret(*args2):
        args = list(args1) + list(args2)
        return func(*args)
    return ret


def get_time_ms():
    return int(round(time.time() * 1000))

def succeeded(func, exception_type=Exception):
    try:
        func()
        return True
    except exception_type:
        return False
                

        
def wrapAngle(angle):
    return ((angle + math.pi) % (2*math.pi)) - math.pi
        

    
def range_to_rgb_spectrogram(val, minVal=0.0, maxVal=1.0, rgb_max=1.0):
    val = (val - float(minVal))/(float(maxVal) - float(minVal))*4.5
    #Dark Blue (0,0,0.5) -> Light Blue (0,0,1.0) -> Cyan (0,1.0,1.0) -> Green (0,1.0,0) -> Yellow (1.0,1.0,0) -> Orange (1.0,0.5,0) -> Red (1.0,0,0)
    #                 (0,0,+0.5)             (0,+1.0,0)           (0,0,-1.0)          (+1.0,0,0)            (0,-1.0,0)
    if val <= 0.5: #dark blue -> light blue
        ret = (0.0, 0.0, 0.5 + 0.5*val/0.5)
    elif val <= 1.5: #light blue -> cyan
        ret = (0.0, val-0.5, 1.0)
    elif val <= 2.5: #cyan -> green
        ret = (0.0, 1.0, 1.0 - (val - 1.5))
    elif val <= 3.5: #green -> yellow
        ret = ((val - 2.5), 1.0, 0.0)
    elif val <= 4.5: #yellow -> red
        ret = (1.0, 1.0 - (val - 3.5), 0.0)
    return (ret[0]*rgb_max, ret[1]*rgb_max, ret[2]*rgb_max)
    
def grayscaleToHeatmap(grayscale, minVal=0.0, maxVal=1.0, rgb_max=1.0, reverse_channels=True):
    grayscale = (grayscale - float(minVal))/(float(maxVal) - float(minVal))*4.5
    heatmap = numpy.zeros((grayscale.shape[0], grayscale.shape[1], 3))
    #Dark Blue (0,0,0.5) -> Light Blue (0,0,1.0) -> Cyan (0,1.0,1.0) -> Green (0,1.0,0) -> Yellow (1.0,1.0,0) -> Orange (1.0,0.5,0) -> Red (1.0,0,0)
    #                 (0,0,+0.5)             (0,+1.0,0)           (0,0,-1.0)          (+1.0,0,0)            (0,-1.0,0)
    range_divides = [0.0, 0.5, 1.5, 2.5, 3.5, 4.5]
    color_funcs = [lambda x : zip([0.0]*x.shape[0], [0.0]*x.shape[0], 0.5 + 0.5*x/0.5),
                   lambda x : zip([0.0]*x.shape[0], x-0.5, [1.0]*x.shape[0]),
                   lambda x : zip([0.0]*x.shape[0], [1.0]*x.shape[0], 1.0 - (x - 1.5)),
                   lambda x : zip((x - 2.5), [1.0]*x.shape[0], [0.0]*x.shape[0]),
                   lambda x : zip([1.0]*x.shape[0], 1.0 - (x - 3.5), [0.0]*x.shape[0])]
    for i in range(len(range_divides)-1):
        pxls = numpy.where((grayscale > range_divides[i]) & (grayscale <= range_divides[i+1]))
        if pxls[0].shape[0] > 0:
            heatmap[pxls[:2]] = numpy.array(color_funcs[i](grayscale[pxls]))
    
    if reverse_channels:
        return heatmap[:,:,::-1]*rgb_max
    else:
        return heatmap*rgb_max
        

 
    
def inrange(minVal, val, maxVal):
    return max(min(val, maxVal), minVal)
    



      
      
def parse_command_args(s):
    s = re.findall('(?:[^\s,"]|"(?:\\.|[^"])*")+', s)
    i = 0
    ret = dict()
    while i < len(s):
        if not s[i].startswith('--'):
            i += 1
            continue
        key = s[i][2:]
        if i+1 < len(s) and not s[i+1].startswith('--'):
            val = s[i+1]
            if (val.startswith('"') and val.endswith('"')) or (val.startswith('\"') and val.endswith('\"')) or (val.startswith("'") and val.endswith("'")) or (val.startswith("\'") and val.endswith("\'")):
                val = val[1:-1]
            ret[key] = val
            i += 2
        elif key.startswith('no_') or key.startswith('no-'):
            key = key[3:]
            ret[key] = 'False'
            i += 1
        else:
            ret[key] = 'True'
            i += 1
    return ret
      

        

def normalize_columns(mat, MAX=None, MIN=None):
    ret_array = False
    if type(mat) is list:
        mat = numpy.asarray(mat)
        ret_array = True
        
    ret_1d = False
    if len(mat.shape) == 1:
        m = numpy.zeros((1,mat.shape[0]))
        m[0] = mat
        mat = m
        ret_1d = True
    

    if MAX is None:
        MAX = numpy.copy(mat[0])
        for row in mat:
            for i, v in zip(range(len(row)), row):
                if v > MAX[i]:
                    MAX[i] = v
    if MIN is None:
        MIN = numpy.copy(mat[0])
        for row in mat:
            for i, v in zip(range(len(row)), row):
                if v < MIN[i]:
                    MIN[i] = v
                    
    ret = numpy.copy(mat)
    for i in range(len(MAX)):
        ret[:,i] = (mat[:,i] - MIN[i])/(MAX[i] - MIN[i])
        
    if ret_1d:
        ret = ret[0]
        
    if ret_array:
        ret = ret.tolist()
    
    return ret, MAX, MIN
    
        
        

    
def runCommandsInTerminator(cmds, layout=None, window_size=None):
    if layout is None:
        y = int(math.floor(math.sqrt(len(cmds))))
        x = int(math.ceil(math.sqrt(len(cmds))))
        while x*y < len(cmds):
            x += 1
        layout = (x,y)
    if window_size is None:
        import Tkinter as tk
        root = tk.Tk()
        window_size = (root.winfo_screenwidth(), root.winfo_screenheight())
        root.destroy()
    temp_path = tempfile.mkdtemp()
    os.makedirs(os.path.join(temp_path, "terminator"))
    fp = open(os.path.join(temp_path, "terminator", "config"), "w")
    s = """
[global_config]
  suppress_multiple_term_dialog = True
[keybindings]
[profiles]
  [[default]]
    scrollback_lines = 5000
    font = Monospace 20
    background_image = None
[layouts]
  [[default]]
"""
    items = dict()
    ordered = []
    ordered.append('main_window')
    items[ordered[-1]] = dict()
    items[ordered[-1]]['type'] = 'Window'
    items[ordered[-1]]['order'] = '0'
    items[ordered[-1]]['parent'] = '\'\''
    items[ordered[-1]]['size'] = '%d, %d' % window_size
    
    spacing = tuple(window_size[i]/layout[i] for i in range(len(layout)))
    rows = [None]*layout[1]
    rows[0] = (ordered[-1], 0)
    for i in range(0, layout[1]-1):
        ordered.append('row%d' % i)
        items[ordered[-1]] = dict()
        items[ordered[-1]]['type'] = 'VPaned'
        items[ordered[-1]]['order'] = rows[i][1]
        items[ordered[-1]]['parent'] = rows[i][0]
        items[ordered[-1]]['position'] = str(int(round(spacing[1])))
        rows[i] = (ordered[-1], 0)
        rows[i+1] = (ordered[-1], 1)
    
    cols = [[None for x in range(layout[0])] for x in range(layout[1])]
    for i in range(0, layout[1]):
        cols[i][0] = rows[i]
        for j in range(0, layout[0]-1 ):
            ordered.append('row%d_col%d' % (i, j))
            items[ordered[-1]] = dict()
            items[ordered[-1]]['type'] = 'HPaned'
            items[ordered[-1]]['order'] = cols[i][j][1]
            items[ordered[-1]]['parent'] = cols[i][j][0]
            items[ordered[-1]]['position'] = str(int(round(spacing[0])))
            cols[i][j] = (ordered[-1], 0)
            cols[i][j+1] = (ordered[-1], 1)
        
    for k in range(layout[0]*layout[1]):
        i, j = k/layout[0], k%layout[0]
        ordered.append('terminal%d' % k)
        items[ordered[-1]] = dict()
        items[ordered[-1]]['type'] = 'Terminal'
        items[ordered[-1]]['order'] = cols[i][j][1]
        items[ordered[-1]]['parent'] = cols[i][j][0]
        items[ordered[-1]]['profile'] = 'default'
        if k < len(cmds):
            items[ordered[-1]]['command'] = '\'' + cmds[k].replace('\'', '\\\'') + '\''
    

    for item in ordered:
        s += "    [[[%s]]]\n" % item
        for key in items[item]:
            s += "      %s = %s\n" % (key, str(items[item][key]))
    s += "[plugins]"
    fp.write(s)
    fp.flush()
    fp.close()
    
    env = os.environ
    env['XDG_CONFIG_HOME'] = temp_path
    subprocess.call(["terminator", "-T", "\"Terminator\""], env=env)
    
    shutil.rmtree(temp_path)
    
    

    
def flattenList(l):
    all_flat = True
    flat = [True]*len(l)
    for i, ll in enumerate(l):
        if type(ll) == tuple or type(ll) == list:
            all_flat = False
            flat[i] = False
    if all_flat:
        return l
    ret = []
    for i, ll in enumerate(l):
        if flat[i]:
            ret.append(ll)
        else:
            ret += flattenList(ll)
    return ret
    

class ProgressMonitor:
    def __init__(self, progress_func, update_interval=5.0):
        self.progress_func = progress_func
        self.update_interval = update_interval
        self.start = time.time()
        self.total_time = 0
        self.running = True
        self.__pause = False
        self.thread = threading.Thread(target=self.__monitor__, args=())
        self.thread.daemon = True
        self.thread.start()
        
    def __del__(self):
        self.stop()
        
    def stop(self):
        self.running = False
        
    def pause(self):
        self.__pause = True
        self.total_time += time.time() - self.start
        
    def resume(self):
        self.__pause = False
        self.start = time.time()
        
    def __monitor__(self):
        pub = SingleLineUpdater()
        percent = 0.0
        while percent < 100.0 and self.running:
            dur = self.total_time + (time.time() - self.start)
            m, s = divmod(dur, 60)
            h, m = divmod(m, 60)
            percent = 100.0*self.progress_func()
            if percent > 0.0:
                dur_ = dur/(percent/100.0) - dur
            else:
                dur_ = 0.0         
            m_, s_ = divmod(dur_, 60)
            h_, m_ = divmod(m_, 60)
            if not self.__pause:
                pub.publish("Elapsed time=%d:%02d:%02d, Percent=%.2f, Estimated Time Remaining=%d:%02d:%02d" % (h, m, s, percent, h_, m_, s_))
            time.sleep(self.update_interval)
        dur = time.time() - self.start
        m, s = divmod(dur, 60)
        h, m = divmod(m, 60)
        print("\nFinished in %d:%02d:%02d." % (h, m, s))
        self.running = False
    
    
def debug_run(f):
    parser = argparse.ArgumentParser()
    parser.add_argument('--debug', action="store_true", dest="debug", default=False)    
    args, sys.argv = parser.parse_known_args(sys.argv)
    
    if args.debug:
        frames = [None]
        def trace_func(frame, event, args):
            if event != 'exception':
                return trace_func
            else:
                if args[-1].tb_next is None:
                    frames[0] = frame
            
        sys.settrace(trace_func)
        try:
            r = f()
        except:
            exc = traceback.format_exc()
            print(exc)
            frame = frames[0]            
            global all_frames
            f = frame
            all_frames = []
            while f is not None:
                all_frames.append(f)
                f = f.f_back
            all_frames.reverse()
            global global_current_frame_idx
            global_current_frame_idx = len(all_frames) - 1
            
            def start_frame():
                global all_frames, global_current_frame_idx, frame_funcs
                f = all_frames[global_current_frame_idx]
                # evaluate commands in current namespace
                namespace = f.f_globals.copy()
                namespace.update(f.f_locals)
                namespace['lf'] = frame_funcs['list_frames']
                namespace['uf'] = frame_funcs['up_frame']
                namespace['df'] = frame_funcs['down_frame']
                namespace['sf'] = frame_funcs['set_frame']
                code.interact(banner="Set frame %s" % str(f.f_code), local=namespace)
                sys.exit()
            
            def list_frames():
                global all_frames, global_current_frame_idx
                for i, f in enumerate(all_frames):
                    if i == global_current_frame_idx:
                        flair = '*'
                    else:
                        flair = ' '
                    print('%s[%d] %s' % (flair, i, str(f.f_code)))
                    
            def up_frame():
                global all_frames, global_current_frame_idx, frame_funcs
                global_current_frame_idx = max(0, global_current_frame_idx - 1)
                frame_funcs['start_frame']()
                
            def down_frame():
                global all_frames, global_current_frame_idx, frame_funcs
                global_current_frame_idx = min(len(all_frames) - 1, global_current_frame_idx + 1)
                frame_funcs['start_frame']()
                
            def set_frame(ii):
                global all_frames, global_current_frame_idx, frame_funcs
                if type(ii) is not int:
                    raise ValueError("Index must be an integer.")
                ii = all_frames.index(all_frames[ii])
                global_current_frame_idx = ii
                frame_funcs['start_frame']()
                
            global frame_funcs
            frame_funcs = {'start_frame':start_frame, 'list_frames':list_frames, 'up_frame':up_frame, 'down_frame':down_frame, 'set_frame':set_frame}

            print("BEGIN POST-MORTEM")
            print("Frames:")
            list_frames()
            start_frame()
    else:
        r = f()
        
    return r
    
   
#better_stdout = None
#def start_multithread_stdout():
#    global better_stdout
#    better_stdout = DummyStdOut()
#    
#def stop_multithread_stdout():
#    global better_stdout
#    better_stdout.stop()

#def better_write(val):
#    global better_stdout
#    better_stdout.write(val)
#    
#def better_print(val):
#    better_write(val + "\n")
#    
#def getChar(blocking=True):
#    while True:
#        c = baxter_external_devices.getch()
#        if c:
#            return c
#    


#class DummyStdOut:
#    def __init__(self):
#        self.realStdOut = sys.stdout
#        sys.stdout = self
#        
#        self.buffer = ""
#        self.buffer_lock = threading.Lock()
#        self.spinning = True
#        self.file = open("test.txt", "w")
#        
#        self.thread = threading.Thread(target=self.__printer, args=())
#        self.thread.daemon = True
#        self.thread.start()
#        
#        
#    def __printer(self):
#        while self.spinning:
#            self.buffer_lock.acquire()
#            if len(self.buffer) > 0 and '\n' in self.buffer:
#                subprocess.call(["stty", "sane"])
#                self.realStdOut.write(self.buffer)
#                self.realStdOut.flush()
#                self.file.write(self.buffer)
#                self.file.flush()
#                self.buffer = ""
#            self.buffer_lock.release()
#            
#            
#    def write(self, val):
#        self.buffer_lock.acquire()
#        self.buffer = self.buffer + val
#        self.buffer_lock.release()
#        
#    def flush(self):
#        pass
#        
#    def stop(self):
#        self.spinning = False
#        self.file.close()
#        sys.stdout = self.realStdOut
#        self.thread.join()





































        
        
        
        
